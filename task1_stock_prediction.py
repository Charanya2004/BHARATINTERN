# -*- coding: utf-8 -*-
"""TASK1-Stock prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13VN67HfCwXlpfY86E5NmULO4h770mtlN
"""

from google.colab  import drive
drive.mount('/content/drive')

import numpy as n
import pandas as p
import matplotlib.pyplot as plot
import tensorflow as t
from sklearn.preprocessing import MinMaxScaler

file=p.read_csv("/content/drive/MyDrive/NSE-TATAGLOBAL11.csv")
file.head()

file.describe()

s=file.sort_values(by='Date')
s.head()

s.reset_index(inplace=True)
s.head()

plot.figure(figsize=(10,7))
plot.plot(s['Date'],s['Close'])

close_sort=s['Close']
close_sort

scaler=MinMaxScaler(feature_range=(0,1))
close_sort=scaler.fit_transform(n.array(close_sort).reshape(-1,1))
close_sort

train_size=int(len(close_sort)*0.7)
test_size=len(close_sort)-train_size
train_data=close_sort[0:train_size]
test_data=close_sort[train_size:len(close_sort),:1]

train_data.shape

test_data.shape

def cd(dataset,time_step=1):
  dataX,dataY=[],[]
  for i in range(len(dataset)-time_step-1):
    a=dataset[i:(i+time_step),0]
    dataX.append(a)
    dataY.append(dataset[i+time_step,0])
  return n.array(dataX),n.array(dataY)

time_step=100
X_train,y_train=cd(train_data,time_step)
X_test,y_test=cd(test_data,time_step)
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')
model.summary()

model.fit(X_train,y_train,validation_split=0.1,epochs=60,batch_size=64,verbose=1)

train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_train,train_predict))

math.sqrt(mean_squared_error(y_test,test_predict))

look_back=100
trainPredictPlot=n.empty_like(close_sort)
trainPredictPlot[:,:]=n.nan
trainPredictPlot[look_back:len(train_predict)+look_back,:]=train_predict
testPredictPlot=n.empty_like(close_sort)
testPredictPlot[:,:]=n.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(close_sort)-1,:]=test_predict

plot.figure(figsize=(10,7))
plot.plot(scaler.inverse_transform(close_sort))
plot.plot(trainPredictPlot)
plot.plot(testPredictPlot)
plot.show()

len(test_data)

pred_input=test_data[271:].reshape(1,-1)
pred_input.shape

temp_input=list(pred_input)
temp_input=temp_input[0].tolist()

from numpy import array
lst_output=[]
n_steps=100
i=0
while(i<30):
  if(len(temp_input)>100):
    pred_input=n.array(temp_input[1:])
    print("{} day input {}".foramt(i,pred_input))
    pred_input=pred_input.reshape(1,-1)
    pred_input=pred_input.reshape((1,n_steps,1))

    yhat=model.predict(pred_input,verbose=0)
    print("{} day output {}".foramt(i,yhat))
    temp_input.extend(yhat[0].tolist())
    temp_input=temp_input[1:]
    lst_output.extend(yhat.tolist())
    i=i+1
  else:
    pred_input=pred_input.reshape((1,n_steps,1))
    yhat=model.predict(pred_input,verbose=0)
    print(yhat[0])
    temp_input.extend(yhat[0].tolist())
    print(len(temp_input))
    lst_output.extend(yhat.tolist())
    i=i+1

print(lst_output)

day_new=n.arange(1,101)
day_pred=n.arange(101,131)

len(close_sort)-100

plot.plot(day_new,scaler.inverse_transform(close_sort[1135:]))
plot.plot(day_pred,scaler.inverse_transform(lst_output))

df3=close_sort.tolist()
df3.extend(lst_output)
plot.plot(df3[900:])